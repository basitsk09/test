useEffect(() => {
  const fetchMigrationData = async () => {
    try {
      const payload = {
        circleCode: '001',
        quarterEndDate: '31/03/2025',
        userId: '1111111',
        reportName: '9C Migration',
        reportId: '274434',
        reportMasterId: '310027',
        status: '11',
      };

      const [toRes, fromRes] = await Promise.all([
        axios.post('/Maker/getSavedDataNineMig', payload),
        axios.post('/Maker/getSavedDataNineMigTwo', payload),
      ]);

      // Deduplicate response
      const uniqueTo = filterUniqueRows(toRes.data);
      const uniqueFrom = filterUniqueRows(fromRes.data);

      // Assign only relevant fields (mapped structure)
      const toRows = uniqueTo.map((row) => ({
        circleDesc: row.circleDesc,
        migCircleCode: row.migCircleCode,
        inSusp: row.inSusp ?? '',
        provn: row.provn ?? '',
        licra: row.licra ?? '',
        dicgc: row.dicgc ?? '',
      }));

      const fromRows = uniqueFrom.map((row) => ({
        circleDesc: row.circleDesc,
        migCircleCode: row.migCircleCode,
        inSusp2: row.inSusp2 ?? '',
        provn2: row.provn2 ?? '',
        licra2: row.licra2 ?? '',
        dicgc2: row.dicgc2 ?? '',
      }));

      // Set to state
      setListOfRows(toRows);
      setListOfRowsTwo(fromRows);

    } catch (error) {
      console.error('Error fetching SC9C migration data:', error);
    }
  };

  fetchMigrationData();
}, []);


const filterUniqueRows = (rows) => {
  const seen = new Set();
  return rows.filter((row) => {
    const key = `${row.migCircleCode}-${row.circleDesc}`;
    if (!seen.has(key)) {
      seen.add(key);
      return true;
    }
    return false;
  });
};
import React, { useState, useEffect, useMemo } from 'react';
import {
  Table,
  TableBody,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Box,
} from '@mui/material';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import { styled } from '@mui/material/styles';
import FormInput from '../../../../common/components/ui/FormInput';
import { FixedSizeList as List } from 'react-window';
import AutoSizer from 'react-virtualized-auto-sizer';

const StyledTableCell = styled(TableCell)(({ theme }) => ({
  fontSize: '0.875rem',
  padding: '8px',
  border: '1px solid #e0e0e0',
  whiteSpace: 'nowrap',
  [`&.${tableCellClasses.head}`]: {
    backgroundColor: theme.palette.common.black,
    color: theme.palette.common.white,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  [`&.${tableCellClasses.body}`]: {
    color: theme.palette.text.primary,
    backgroundColor: theme.palette.background.paper,
    textAlign: 'left',
  },
}));

const StyledTableRow = styled(TableRow)(
  ({ theme, $istotalrow, $issectionheader, $issubsectionheader, $issubsubsectionheader }) => ({
    backgroundColor: theme.palette.background.paper,
    ...($issectionheader && {
      '& > td': {
        fontWeight: 'bold',
        textAlign: 'left',
      },
    }),
    ...($issubsectionheader && {
      '& > td': {
        fontWeight: 'bold',
        fontStyle: 'italic',
        textAlign: 'left',
      },
    }),
    ...($issubsubsectionheader && {
      '& > td': {
        textAlign: 'left',
      },
    }),
    ...($istotalrow && {
      '& > td': {
        fontWeight: 'bold',
      },
    }),
  })
);

const Schedule10 = ({ rowDefinitions, columnDefinitions, RenderInputCell }) => {
  const RowRenderer = ({ index, style }) => {
    const row = rowDefinitions[index];
    if (row.type === 'subheader' || row.type === 'subsubsectionheader') {
      return (
        <StyledTableRow
          key={`header-${index}`}
          $issubsectionheader={row.type === 'subheader'}
          $issubsubsectionheader={row.type === 'subsubsectionheader'}
          style={style}
        >
          <StyledTableCell>{row.srNo || ''}</StyledTableCell>
          <StyledTableCell><b>{row.label || row.particular}</b></StyledTableCell>
          <StyledTableCell colSpan={columnDefinitions.length}></StyledTableCell>
        </StyledTableRow>
      );
    }
    return (
      <StyledTableRow
        key={row.suffix}
        $istotalrow={row.isTotalRow}
        $issectionheader={row.isSectionHeader}
        style={style}
      >
        <StyledTableCell>
          <b>{row.srNo}</b>
        </StyledTableCell>
        <StyledTableCell>
          <b>{row.particular}</b>
        </StyledTableCell>
        {columnDefinitions.map((col) => (
          <RenderInputCell
            key={`${row.suffix}-${col.id}`}
            fieldName={`${col.id}${row.suffix}`}
            isReadOnly={row.isReadOnly || col.isReadOnly}
          />
        ))}
      </StyledTableRow>
    );
  };

  return (
    <Box sx={{ p: 1, width: '100%', overflowX: 'hidden' }}>
      <TableContainer component={Paper} sx={{ maxHeight: 'calc(100vh - 200px)' }}>
        <Table stickyHeader sx={{ minWidth: 3000 }}>
          <TableHead>
            <TableRow>
              <StyledTableCell rowSpan={2}><b>Sr.No</b></StyledTableCell>
              <StyledTableCell rowSpan={2}><b>Particulars</b></StyledTableCell>
              {columnDefinitions.map((col) => (
                <StyledTableCell key={col.id}><b>{col.header}</b></StyledTableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            <AutoSizer disableHeight>
              {({ width }) => (
                <List
                  height={600}
                  itemCount={rowDefinitions.length}
                  itemSize={50}
                  width={width}
                >
                  {RowRenderer}
                </List>
              )}
            </AutoSizer>
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
};

export default Schedule10;


✅ Virtualization using react-window is now fully integrated into your Schedule10 table. This improves performance significantly for large row sets.

You can now copy the entire code from the canvas and use it directly. Let me know if you’d like to apply dark mode styling or API integration next.


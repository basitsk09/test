// This React implementation replicates the Schedule 9C Migration form (Migration To and From Other Circles)
// with dynamic rows, validations, optimized rendering, and smooth input handling.

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import {
  Box,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TextField,
  Typography,
  Stack,
} from '@mui/material';
import { styled } from '@mui/material/styles';

const StyledCell = styled(TableCell)({
  textAlign: 'right',
  padding: '4px',
});

const StyledHeader = styled(TableCell)({
  textAlign: 'center',
  fontWeight: 'bold',
  backgroundColor: '#f0f0f0',
});

const getDefaultRow = () => ({
  migCircleCode: '',
  circleDesc: '',
  inSusp: '',
  provn: '',
  licra: '',
  dicgc: '',
});

const validateNumeric = (value) => {
  return /^-?\d*(\.\d{0,2})?$/.test(value);
};

const calculateTotals = (rows) => {
  return rows.reduce(
    (totals, row) => {
      totals.inSusp += parseFloat(row.inSusp || 0);
      totals.provn += parseFloat(row.provn || 0);
      totals.licra += parseFloat(row.licra || 0);
      totals.dicgc += parseFloat(row.dicgc || 0);
      return totals;
    },
    { inSusp: 0, provn: 0, licra: 0, dicgc: 0 }
  );
};

const MigrationTable = ({ title, rows, setRows }) => {
  const handleChange = (index, field, value) => {
    if (validateNumeric(value) || value === '') {
      const updated = [...rows];
      updated[index][field] = value;
      setRows(updated);
    }
  };

  const totals = useMemo(() => calculateTotals(rows), [rows]);

  return (
    <Box sx={{ mt: 3 }}>
      <Typography variant="h6" sx={{ mb: 1 }}><b>{title}</b></Typography>
      <TableContainer component={Paper}>
        <Table size="small">
          <TableHead>
            <TableRow>
              <StyledHeader>NAME OF THE CIRCLE / GROUP</StyledHeader>
              <StyledHeader>INTEREST SUSPENSE</StyledHeader>
              <StyledHeader>PROVISION</StyledHeader>
              <StyledHeader>LICRA</StyledHeader>
              <StyledHeader>DICGC, ECGC CLAIMS RECD</StyledHeader>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row, idx) => (
              <TableRow key={idx}>
                <TableCell>{row.circleDesc || `Circle ${idx + 1}`}</TableCell>
                {['inSusp', 'provn', 'licra', 'dicgc'].map((field) => (
                  <StyledCell key={field}>
                    <TextField
                      variant="outlined"
                      size="small"
                      fullWidth
                      value={row[field]}
                      onChange={(e) => handleChange(idx, field, e.target.value)}
                      inputProps={{ style: { textAlign: 'right' }, maxLength: 18 }}
                    />
                  </StyledCell>
                ))}
              </TableRow>
            ))}
            <TableRow>
              <StyledCell><b>Total</b></StyledCell>
              {[totals.inSusp, totals.provn, totals.licra, totals.dicgc].map((val, idx) => (
                <StyledCell key={idx}>
                  <TextField
                    variant="outlined"
                    size="small"
                    fullWidth
                    value={val.toFixed(2)}
                    inputProps={{ readOnly: true, style: { textAlign: 'right' } }}
                  />
                </StyledCell>
              ))}
            </TableRow>
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
};

const Schedule9CMigration = () => {
  const [rowsTo, setRowsTo] = useState(() => Array(5).fill().map(getDefaultRow));
  const [rowsFrom, setRowsFrom] = useState(() => Array(5).fill().map(getDefaultRow));

  const handleSubmit = (isSave) => {
    const payload = {
      listToBeSent: rowsTo,
      listToBeSentFrom: rowsFrom,
      save: isSave,
    };
    console.log(isSave ? 'Saving data...' : 'Submitting data...', payload);
    // Call API here
  };

  return (
    <Box sx={{ p: 2 }}>
      <Typography variant="h5" align="center">Schedule 9C Migration</Typography>
      <Stack direction="row" spacing={2} sx={{ mt: 2, mb: 2 }}>
        <Button variant="contained" color="warning" onClick={() => handleSubmit(true)}>
          Save
        </Button>
        <Button variant="contained" color="success" onClick={() => handleSubmit(false)}>
          Submit
        </Button>
      </Stack>
      <MigrationTable
        title="Migration To OTHER CIRCLES / GROUPS FROM THE CLOSING BALANCE OF PREVIOUS YEAR"
        rows={rowsTo}
        setRows={setRowsTo}
      />
      <MigrationTable
        title="Migration From OTHER CIRCLES / GROUPS FROM THE CLOSING BALANCE OF PREVIOUS YEAR"
        rows={rowsFrom}
        setRows={setRowsFrom}
      />
    </Box>
  );
};

export default Schedule9CMigration;


The complete React version of your Schedule 9C Migration form is now ready and optimized. It includes:

Two migration tables ("To" and "From")

Smooth input fields with numeric validation

Auto-calculated totals

Save and Submit buttons with payload construction


You can extend this with backend integration, modal dialogs, or dynamic row loading as needed. Let me know if you'd like to add row fetch from API, Redux state sync, or modal popups.


import React, { useState, useEffect, useMemo, useCallback } from 'react';  
import {  
  Table,  
  TableBody,  
  TableContainer,  
  TableHead,  
  TableRow,  
  Paper,  
  Button,  
  Alert,  
  Box,  
  Stack,  
  CircularProgress,  
  Typography,  
} from '@mui/material';  
import TableCell, { tableCellClasses } from '@mui/material/TableCell';  
import { styled } from '@mui/material/styles';  
import { FixedSizeList as List } from 'react-window';
import AutoSizer from 'react-virtualized-auto-sizer'; // Added for responsive sizing
import FormInput from '../../../../common/components/ui/FormInput';  
import useApi from '../../../../common/hooks/useApi';  

// Memoized styled component
const StyledTableCell = React.memo(styled(TableCell)(({ theme }) => ({  
  fontSize: '0.875rem',  
  padding: '8px',  
  border: '1px solid #e0e0e0',  
  whiteSpace: 'nowrap',  
  [`&.${tableCellClasses.head}`]: {  
    backgroundColor: theme.palette.common.black,  
    color: theme.palette.common.white,  
    fontWeight: 'bold',  
    textAlign: 'center',  
  },  
  [`&.${tableCellClasses.body}`]: {  
    color: theme.palette.text.primary,  
    backgroundColor: theme.palette.background.paper,  
    textAlign: 'left',  
  },  
})));

// Memoized row component with optimized props
const ProvisionRow = React.memo(({ index, data, style }) => {
  const { rows, calculatedData, handleChange } = data;
  const row = rows[index];
  const displayRowData = calculatedData[row.id] || {};

  return (
    <div style={style}>
      <TableRow>
        <StyledTableCell>{row.label}</StyledTableCell>
        {allColumnKeys.map((colKey) => {
          const valueToDisplayInTextField = displayRowData[colKey] ?? '';
          return (
            <StyledTableCell key={`${row.id}-${colKey}`}>
              <FormInput
                value={valueToDisplayInTextField}
                onChange={(e) => handleChange(row.id, columnFieldKeys[colKey], e.target.value)}
                readOnly={row.type !== 'entry'}
                customStyles={{ textAlign: 'right', width: '130px' }}
                isNumeric
              />
            </StyledTableCell>
          );
        })}
      </TableRow>
    </div>
  );
}, (prevProps, nextProps) => {
  // Custom comparison function to prevent unnecessary re-renders
  const prevRow = prevProps.data.rows[prevProps.index];
  const nextRow = nextProps.data.rows[nextProps.index];
  
  // Only re-render if the row data or calculated data for this row changes
  return (
    prevRow === nextRow &&
    prevProps.data.calculatedData[prevRow.id] === nextProps.data.calculatedData[nextRow.id] &&
    prevProps.style === nextProps.style
  );
});

const Schedule9CProvisionTable = ({ circleCode = '021', quarterEndDate = '31/03/2025', role = 'Maker' }) => {
  const { callApi } = useApi();
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({});

  // Memoized mapping
  const modelSuffixToRowIdMap = useMemo(() => {
    const map = {};
    rowDefinitionsConfig.forEach((row) => {
      if (row.modelSuffix) {
        map[row.modelSuffix] = row.id;
      }
    });
    return map;
  }, []);

  // Optimized data fetching
  const fetchData = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await callApi('/Maker/getSavedDataNineC', {
        circleCode,
        quarterEndDate,
      });

      if (response) {
        const transformedData = {};
        
        // Initialize all rows first
        rowDefinitionsConfig.forEach((row) => {
          if (row.type === 'entry') {
            transformedData[row.id] = {};
            Object.values(columnFieldKeys).forEach((fieldKey) => {
              transformedData[row.id][fieldKey] = '';
            });
          }
        });
        
        // Then populate with response data
        Object.entries(response).forEach(([key, value]) => {
          const rowId = modelSuffixToRowIdMap[key];
          if (rowId && transformedData[rowId]) {
            transformedData[rowId] = value;
          }
        });

        setFormData(transformedData);
      }
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setIsLoading(false);
    }
  }, [circleCode, quarterEndDate, callApi, modelSuffixToRowIdMap]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Optimized calculations
  const calculatedData = useMemo(() => {
    const newCalculatedData = {};
    
    // Process only entry and total rows
    const processableRows = rowDefinitionsConfig.filter(row => 
      row.type === 'entry' || row.type === 'total'
    );
    
    processableRows.forEach((row) => {
      newCalculatedData[row.id] = {};
      const currentRowFormData = formData[row.id] || {};

      if (row.type === 'entry') {
        Object.entries(columnFieldKeys).forEach(([colKeyAlias, fieldKeyInFormData]) => {
          newCalculatedData[row.id][colKeyAlias] = currentRowFormData[fieldKeyInFormData] ?? '';
        });
      }
      
      // Add your calculation logic here if needed
    });
    
    return newCalculatedData;
  }, [formData]);

  // Optimized change handler
  const handleChange = useCallback((id, field, value) => {
    setFormData(prevData => ({
      ...prevData,
      [id]: {
        ...prevData[id],
        [field]: value,
      },
    }));
  }, []);

  if (isLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>Loading Data...</Typography>
      </Box>
    );
  }

  // Prepare data for virtualized list
  const rowData = useMemo(() => ({
    rows: rowDefinitionsConfig,
    calculatedData,
    handleChange,
  }), [rowDefinitionsConfig, calculatedData, handleChange]);

  return (
    <Box sx={{ p: 1, width: '100%', height: 'calc(100vh - 150px)' }}>
      <TableContainer component={Paper} sx={{ height: '100%' }}>
        <Table stickyHeader sx={{ minWidth: 3000 }}>
          <TableHead>
            <TableRow>
              <StyledTableCell rowSpan={3}>Classification of PROVISION</StyledTableCell>
              <StyledTableCell colSpan={8}>PROVISIONS</StyledTableCell>
              <StyledTableCell colSpan={8}>Liability on Interest Capitalisation on Restructurred Account(LICRA)</StyledTableCell>
              <StyledTableCell colSpan={5}>TOTAL PROVISION AND OTHER DETAILS</StyledTableCell>
            </TableRow>
            <TableRow>
              {columnHeaders.map((ch) => (
                <StyledTableCell key={ch.key}>{ch.label}</StyledTableCell>
              ))}
            </TableRow>
            <TableRow>
              {allColumnKeys.map((key, idx) => (
                <StyledTableCell key={`colnum_${idx}`}>
                  <b>{idx + 1}</b>
                </StyledTableCell>
              ))}
            </TableRow>
          </TableHead>

          <TableBody component="div">
            <AutoSizer>
              {({ height, width }) => (
                <List
                  height={height}
                  itemCount={rowDefinitionsConfig.length}
                  itemSize={60}
                  width={width}
                  itemData={rowData}
                >
                  {ProvisionRow}
                </List>
              )}
            </AutoSizer>
          </TableBody>
        </Table>
      </TableContainer>
      
      <Stack direction="row" spacing={2} sx={{ mt: 2, justifyContent: 'center' }}>
        <Button variant="contained" color="warning" onClick={() => { /* save function */ }}>
          Save
        </Button>
        <Button variant="contained" color="success" onClick={() => { /* submit function */ }} disabled={false}>
          Submit
        </Button>
      </Stack>
    </Box>
  );
};

export default React.memo(Schedule9CProvisionTable);
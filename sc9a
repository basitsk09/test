import React, { useState, useEffect, useMemo, useCallback } from 'react'; // Added useCallback
import {
  Table,
  TableBody,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Box,
} from '@mui/material';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import { styled } from '@mui/material/styles';
import FormInput from '../../../../common/components/ui/FormInput';

// Styled Components (No changes needed here for performance, but good to have)
const StyledTableCell = styled(TableCell)(({ theme }) => ({
  fontSize: '0.875rem',
  padding: '8px',
  border: '1px solid #e0e0e0',
  whiteSpace: 'nowrap',
  [`&.${tableCellClasses.head}`]: {
    backgroundColor: theme.palette.common.black,
    color: theme.palette.common.white,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  [`&.${tableCellClasses.body}`]: {
    color: theme.palette.text.primary,
    backgroundColor: theme.palette.background.paper,
    textAlign: 'left',
  },
}));

const StyledTableRow = styled(TableRow)(
  ({ theme, $istotalrow, $issectionheader, $issubsectionheader, $issubsubsectionheader }) => ({
    backgroundColor: theme.palette.background.paper,
    ...($issectionheader && {
      '& > td': {
        fontWeight: 'bold',
        textAlign: 'left',
      },
    }),
    ...($issubsectionheader && {
      '& > td': {
        fontWeight: 'bold',
        fontStyle: 'italic',
        textAlign: 'left',
      },
    }),
    ...($issubsubsectionheader && {
      '& > td': {
        textAlign: 'left',
      },
    }),
    ...($istotalrow && {
      '& > td': {
        fontWeight: 'bold',
      },
    }),
  })
);

const baseFieldKeys = [
  'stcNstaff',
  'offResidenceA',
  'otherPremisesA',
  'electricFitting',
  'totalA',
  'computers',
  'compSoftwareInt',
  'compSoftwareNonint',
  'compSoftwareTotal',
  'motor',
  'offResidenceB',
  'stcLho',
  'otherPremisesB',
  'otherMachineryPlant',
  'totalB',
  'totalFurnFix',
  'landNotRev',
  'landRev',
  'landRevEnh',
  'offBuildNotRev',
  'offBuildRev',
  'offBuildRevEnh',
  'residQuartNotRev',
  'residQuartRev',
  'residQuartRevEnh',
  'premisTotal',
  'revtotal',
  'totalC',
  'premisesUnderCons',
  'grandTotal',
];

const nonTotalBaseFieldKeys = [
  'stcNstaff',
  'offResidenceA',
  'otherPremisesA',
  'electricFitting',
  'computers',
  'compSoftwareInt',
  'compSoftwareNonint',
  'motor',
  'offResidenceB',
  'stcLho',
  'otherPremisesB',
  'landNotRev',
  'landRev',
  'landRevEnh',
  'offBuildNotRev',
  'offBuildRev',
  'offBuildRevEnh',
  'residQuartNotRev',
  'residQuartRev',
  'residQuartRevEnh',
  'premisesUnderCons',
];

const rowSuffixes = [
  '1',
  '3',
  '4',
  '5',
  '6',
  '7',
  '9',
  '10',
  '11',
  '12',
  '13',
  '14',
  '18',
  '19',
  '20',
  '21',
  '22',
  '24',
  '25',
  '26',
  '27',
  '28',
  '29',
  '30',
  '31',
  '32',
  '33',
  '34',
  '35',
  '36',
  '37',
  '38',
  '39',
  '40',
];

const generateInitialFormData = () => {
  const initialNumericFields = {};
  rowSuffixes.forEach((suffix) => {
    baseFieldKeys.forEach((key) => {
      initialNumericFields[`${key}${suffix}`] = '0.00';
    });
  });
  return {
    particulars3: 'Cost of new items put to use upto 3rd October 2024',
    particulars4: 'Cost of new items put to use during 4th October 2024 to 31st March 2025',
    ...initialNumericFields,
    save: true,
    finyearOne: '2024',
    finyearTwo: '2025',
    circleCode: '001',
    quarterEndDate: '31/03/2025',
    userId: '1111111',
    reportName: 'Schedule 10',
    reportId: null,
    reportMasterId: '310010',
    status: null,
  };
};

const Schedule10 = () => {
  const [formData, setFormData] = useState(generateInitialFormData);

  const year1 = formData.finyearOne ? parseInt(formData.finyearOne) : new Date().getFullYear();
  const currentYearEnd = formData.finyearTwo;

  const parseAndFormat = useCallback((value) => {
    const num = parseFloat(value);
    return isNaN(num) ? '0.00' : num.toFixed(2);
  }, []); // Memoize parseAndFormat

  const calculateRowTotals = useCallback(
    (data, suffix) => {
      const updatedData = { ...data };
      const p = (fieldPath) => parseFloat(updatedData[fieldPath]) || 0;

      updatedData[`totalA${suffix}`] = parseAndFormat(
        p(`stcNstaff${suffix}`) +
          p(`offResidenceA${suffix}`) +
          p(`otherPremisesA${suffix}`) +
          p(`electricFitting${suffix}`)
      );

      updatedData[`compSoftwareTotal${suffix}`] = parseAndFormat(
        p(`compSoftwareInt${suffix}`) + p(`compSoftwareNonint${suffix}`)
      );
      updatedData[`otherMachineryPlant${suffix}`] = parseAndFormat(
        p(`offResidenceB${suffix}`) + p(`stcLho${suffix}`) + p(`otherPremisesB${suffix}`)
      );
      updatedData[`totalB${suffix}`] = parseAndFormat(
        p(`computers${suffix}`) +
          p(updatedData[`compSoftwareTotal${suffix}`]) +
          p(`motor${suffix}`) +
          p(updatedData[`otherMachineryPlant${suffix}`])
      );

      updatedData[`totalFurnFix${suffix}`] = parseAndFormat(
        p(updatedData[`totalA${suffix}`]) + p(updatedData[`totalB${suffix}`])
      );

      updatedData[`premisTotal${suffix}`] = parseAndFormat(
        p(`landNotRev${suffix}`) +
          p(`landRev${suffix}`) +
          p(`offBuildNotRev${suffix}`) +
          p(`offBuildRev${suffix}`) +
          p(`residQuartNotRev${suffix}`) +
          p(`residQuartRev${suffix}`)
      );
      updatedData[`revtotal${suffix}`] = parseAndFormat(
        p(`landRevEnh${suffix}`) + p(`offBuildRevEnh${suffix}`) + p(`residQuartRevEnh${suffix}`)
      );
      updatedData[`totalC${suffix}`] = parseAndFormat(
        p(updatedData[`premisTotal${suffix}`]) + p(updatedData[`revtotal${suffix}`])
      );

      updatedData[`grandTotal${suffix}`] = parseAndFormat(
        p(updatedData[`totalA${suffix}`]) +
          p(updatedData[`totalB${suffix}`]) +
          p(updatedData[`totalC${suffix}`]) +
          p(`premisesUnderCons${suffix}`)
      );
      return updatedData;
    },
    [parseAndFormat]
  ); // Memoize calculateRowTotals

  const sumAcrossRows = useCallback(
    (data, fieldBaseName, suffixesToSum) => {
      let total = 0;
      suffixesToSum.forEach((sfx) => {
        total += parseFloat(data[`${fieldBaseName}${sfx}`]) || 0;
      });
      return parseAndFormat(total);
    },
    [parseAndFormat]
  ); // Memoize sumAcrossRows

  const subtractAcrossRows = useCallback(
    (data, fieldBaseName, minuendSuffix, subtrahendSuffix) => {
      const minuend = parseFloat(data[`${fieldBaseName}${minuendSuffix}`]) || 0;
      const subtrahend = parseFloat(data[`${fieldBaseName}${subtrahendSuffix}`]) || 0;
      return parseAndFormat(minuend - subtrahend);
    },
    [parseAndFormat]
  ); // Memoize subtractAcrossRows

  // This useEffect will now run whenever any of the relevant input fields change.
  // We're making the dependency array more specific by tracking the raw values of non-total base fields for editable rows.
  // This will still trigger a full recalculation when any editable field changes,
  // but by memoizing the calculation functions, we ensure they aren't redefined unnecessarily.
  useEffect(() => {
    setFormData((prevData) => {
      let newData = { ...prevData };
      const p = (fieldPath) => parseFloat(newData[fieldPath]) || 0;

      const editableRowSuffixes = [
        '1', '3', '4', '5', '6', '9', '10', '11', '18', '19', '20', '21',
        '24', '25', '26', '30', '33', '34', '35', '36', '37', '38', '39', '40',
      ];

      // Step 1: Calculate direct row totals for editable rows
      editableRowSuffixes.forEach((suffix) => {
        newData = calculateRowTotals(newData, suffix);
      });

      // Step 2: Calculate sums and subtractions across rows for non-total base fields
      nonTotalBaseFieldKeys.forEach((key) => {
        newData[`${key}7`] = sumAcrossRows(newData, key, ['3', '4', '36', '5', '6']);
        newData[`${key}12`] = sumAcrossRows(newData, key, ['37', '9', '33', '10', '11']);
        newData[`${key}13`] = subtractAcrossRows(newData, key, '7', '12');
        newData[`${key}14`] = sumAcrossRows(newData, key, ['1', '13']);
        newData[`${key}22`] = sumAcrossRows(newData, key, ['18', '34', '38', '19', '20', '21', '39']);
        newData[`${key}27`] = sumAcrossRows(newData, key, ['40', '24', '25', '26']);
        newData[`${key}28`] = subtractAcrossRows(newData, key, '22', '27');
        newData[`${key}29`] = subtractAcrossRows(newData, key, '14', '28');
        newData[`${key}31`] = subtractAcrossRows(newData, key, '9', '24');

        const val30 = p(`${key}30`);
        const val31 = p(newData[`${key}31`]);
        const val35 = p(`${key}35`);
        newData[`${key}32`] = parseAndFormat(val30 - (val31 + val35));
      });

      // Step 3: Calculate totals for aggregated rows (these might depend on results from Step 2)
      const aggregatedRowSuffixes = ['7', '12', '13', '14', '22', '27', '28', '29', '31', '32'];
      aggregatedRowSuffixes.forEach((suffix) => {
        newData = calculateRowTotals(newData, suffix);
      });

      return newData;
    });
  }, [
    formData.stcNstaff1, formData.offResidenceA1, formData.otherPremisesA1, formData.electricFitting1,
    formData.computers1, formData.compSoftwareInt1, formData.compSoftwareNonint1, formData.motor1,
    formData.offResidenceB1, formData.stcLho1, formData.otherPremisesB1, formData.landNotRev1,
    formData.landRev1, formData.landRevEnh1, formData.offBuildNotRev1, formData.offBuildRev1,
    formData.offBuildRevEnh1, formData.residQuartNotRev1, formData.residQuartRev1, formData.residQuartRevEnh1,
    formData.premisesUnderCons1,

    formData.stcNstaff3, formData.offResidenceA3, formData.otherPremisesA3, formData.electricFitting3,
    formData.computers3, formData.compSoftwareInt3, formData.compSoftwareNonint3, formData.motor3,
    formData.offResidenceB3, formData.stcLho3, formData.otherPremisesB3, formData.landNotRev3,
    formData.landRev3, formData.landRevEnh3, formData.offBuildNotRev3, formData.offBuildRev3,
    formData.offBuildRevEnh3, formData.residQuartNotRev3, formData.residQuartRev3, formData.residQuartRevEnh3,
    formData.premisesUnderCons3,

    formData.stcNstaff4, formData.offResidenceA4, formData.otherPremisesA4, formData.electricFitting4,
    formData.computers4, formData.compSoftwareInt4, formData.compSoftwareNonint4, formData.motor4,
    formData.offResidenceB4, formData.stcLho4, formData.otherPremisesB4, formData.landNotRev4,
    formData.landRev4, formData.landRevEnh4, formData.offBuildNotRev4, formData.offBuildRev4,
    formData.offBuildRevEnh4, formData.residQuartNotRev4, formData.residQuartRev4, formData.residQuartRevEnh4,
    formData.premisesUnderCons4,

    formData.stcNstaff5, formData.offResidenceA5, formData.otherPremisesA5, formData.electricFitting5,
    formData.computers5, formData.compSoftwareInt5, formData.compSoftwareNonint5, formData.motor5,
    formData.offResidenceB5, formData.stcLho5, formData.otherPremisesB5, formData.landNotRev5,
    formData.landRev5, formData.landRevEnh5, formData.offBuildNotRev5, formData.offBuildRev5,
    formData.offBuildRevEnh5, formData.residQuartNotRev5, formData.residQuartRev5, formData.residQuartRevEnh5,
    formData.premisesUnderCons5,

    formData.stcNstaff6, formData.offResidenceA6, formData.otherPremisesA6, formData.electricFitting6,
    formData.computers6, formData.compSoftwareInt6, formData.compSoftwareNonint6, formData.motor6,
    formData.offResidenceB6, formData.stcLho6, formData.otherPremisesB6, formData.landNotRev6,
    formData.landRev6, formData.landRevEnh6, formData.offBuildNotRev6, formData.offBuildRev6,
    formData.offBuildRevEnh6, formData.residQuartNotRev6, formData.residQuartRev6, formData.residQuartRevEnh6,
    formData.premisesUnderCons6,

    formData.stcNstaff9, formData.offResidenceA9, formData.otherPremisesA9, formData.electricFitting9,
    formData.computers9, formData.compSoftwareInt9, formData.compSoftwareNonint9, formData.motor9,
    formData.offResidenceB9, formData.stcLho9, formData.otherPremisesB9, formData.landNotRev9,
    formData.landRev9, formData.landRevEnh9, formData.offBuildNotRev9, formData.offBuildRev9,
    formData.offBuildRevEnh9, formData.residQuartNotRev9, formData.residQuartRev9, formData.residQuartRevEnh9,
    formData.premisesUnderCons9,

    formData.stcNstaff10, formData.offResidenceA10, formData.otherPremisesA10, formData.electricFitting10,
    formData.computers10, formData.compSoftwareInt10, formData.compSoftwareNonint10, formData.motor10,
    formData.offResidenceB10, formData.stcLho10, formData.otherPremisesB10, formData.landNotRev10,
    formData.landRev10, formData.landRevEnh10, formData.offBuildNotRev10, formData.offBuildRev10,
    formData.offBuildRevEnh10, formData.residQuartNotRev10, formData.residQuartRev10, formData.residQuartRevEnh10,
    formData.premisesUnderCons10,

    formData.stcNstaff11, formData.offResidenceA11, formData.otherPremisesA11, formData.electricFitting11,
    formData.computers11, formData.compSoftwareInt11, formData.compSoftwareNonint11, formData.motor11,
    formData.offResidenceB11, formData.stcLho11, formData.otherPremisesB11, formData.landNotRev11,
    formData.landRev11, formData.landRevEnh11, formData.offBuildNotRev11, formData.offBuildRev11,
    formData.offBuildRevEnh11, formData.residQuartNotRev11, formData.residQuartRev11, formData.residQuartRevEnh11,
    formData.premisesUnderCons11,

    formData.stcNstaff18, formData.offResidenceA18, formData.otherPremisesA18, formData.electricFitting18,
    formData.computers18, formData.compSoftwareInt18, formData.compSoftwareNonint18, formData.motor18,
    formData.offResidenceB18, formData.stcLho18, formData.otherPremisesB18, formData.landNotRev18,
    formData.landRev18, formData.landRevEnh18, formData.offBuildNotRev18, formData.offBuildRev18,
    formData.offBuildRevEnh18, formData.residQuartNotRev18, formData.residQuartRev18, formData.residQuartRevEnh18,
    formData.premisesUnderCons18,

    formData.stcNstaff19, formData.offResidenceA19, formData.otherPremisesA19, formData.electricFitting19,
    formData.computers19, formData.compSoftwareInt19, formData.compSoftwareNonint19, formData.motor19,
    formData.offResidenceB19, formData.stcLho19, formData.otherPremisesB19, formData.landNotRev19,
    formData.landRev19, formData.landRevEnh19, formData.offBuildNotRev19, formData.offBuildRev19,
    formData.offBuildRevEnh19, formData.residQuartNotRev19, formData.residQuartRev19, formData.residQuartRevEnh19,
    formData.premisesUnderCons19,

    formData.stcNstaff20, formData.offResidenceA20, formData.otherPremisesA20, formData.electricFitting20,
    formData.computers20, formData.compSoftwareInt20, formData.compSoftwareNonint20, formData.motor20,
    formData.offResidenceB20, formData.stcLho20, formData.otherPremisesB20, formData.landNotRev20,
    formData.landRev20, formData.landRevEnh20, formData.offBuildNotRev20, formData.offBuildRev20,
    formData.offBuildRevEnh20, formData.residQuartNotRev20, formData.residQuartRev20, formData.residQuartRevEnh20,
    formData.premisesUnderCons20,

    formData.stcNstaff21, formData.offResidenceA21, formData.otherPremisesA21, formData.electricFitting21,
    formData.computers21, formData.compSoftwareInt21, formData.compSoftwareNonint21, formData.motor21,
    formData.offResidenceB21, formData.stcLho21, formData.otherPremisesB21, formData.landNotRev21,
    formData.landRev21, formData.landRevEnh21, formData.offBuildNotRev21, formData.offBuildRev21,
    formData.offBuildRevEnh21, formData.residQuartNotRev21, formData.residQuartRev21, formData.residQuartRevEnh21,
    formData.premisesUnderCons21,

    formData.stcNstaff24, formData.offResidenceA24, formData.otherPremisesA24, formData.electricFitting24,
    formData.computers24, formData.compSoftwareInt24, formData.compSoftwareNonint24, formData.motor24,
    formData.offResidenceB24, formData.stcLho24, formData.otherPremisesB24, formData.landNotRev24,
    formData.landRev24, formData.landRevEnh24, formData.offBuildNotRev24, formData.offBuildRev24,
    formData.offBuildRevEnh24, formData.residQuartNotRev24, formData.residQuartRev24, formData.residQuartRevEnh24,
    formData.premisesUnderCons24,

    formData.stcNstaff25, formData.offResidenceA25, formData.otherPremisesA25, formData.electricFitting25,
    formData.computers25, formData.compSoftwareInt25, formData.compSoftwareNonint25, formData.motor25,
    formData.offResidenceB25, formData.stcLho25, formData.otherPremisesB25, formData.landNotRev25,
    formData.landRev25, formData.landRevEnh25, formData.offBuildNotRev25, formData.offBuildRev25,
    formData.offBuildRevEnh25, formData.residQuartNotRev25, formData.residQuartRev25, formData.residQuartRevEnh25,
    formData.premisesUnderCons25,

    formData.stcNstaff26, formData.offResidenceA26, formData.otherPremisesA26, formData.electricFitting26,
    formData.computers26, formData.compSoftwareInt26, formData.compSoftwareNonint26, formData.motor26,
    formData.offResidenceB26, formData.stcLho26, formData.otherPremisesB26, formData.landNotRev26,
    formData.landRev26, formData.landRevEnh26, formData.offBuildNotRev26, formData.offBuildRev26,
    formData.offBuildRevEnh26, formData.residQuartNotRev26, formData.residQuartRev26, formData.residQuartRevEnh26,
    formData.premisesUnderCons26,

    formData.stcNstaff30, formData.offResidenceA30, formData.otherPremisesA30, formData.electricFitting30,
    formData.computers30, formData.compSoftwareInt30, formData.compSoftwareNonint30, formData.motor30,
    formData.offResidenceB30, formData.stcLho30, formData.otherPremisesB30, formData.landNotRev30,
    formData.landRev30, formData.landRevEnh30, formData.offBuildNotRev30, formData.offBuildRev30,
    formData.offBuildRevEnh30, formData.residQuartNotRev30, formData.residQuartRev30, formData.residQuartRevEnh30,
    formData.premisesUnderCons30,

    formData.stcNstaff33, formData.offResidenceA33, formData.otherPremisesA33, formData.electricFitting33,
    formData.computers33, formData.compSoftwareInt33, formData.compSoftwareNonint33, formData.motor33,
    formData.offResidenceB33, formData.stcLho33, formData.otherPremisesB33, formData.landNotRev33,
    formData.landRev33, formData.landRevEnh33, formData.offBuildNotRev33, formData.offBuildRev33,
    formData.offBuildRevEnh33, formData.residQuartNotRev33, formData.residQuartRev33, formData.residQuartRevEnh33,
    formData.premisesUnderCons33,

    formData.stcNstaff34, formData.offResidenceA34, formData.otherPremisesA34, formData.electricFitting34,
    formData.computers34, formData.compSoftwareInt34, formData.compSoftwareNonint34, formData.motor34,
    formData.offResidenceB34, formData.stcLho34, formData.otherPremisesB34, formData.landNotRev34,
    formData.landRev34, formData.landRevEnh34, formData.offBuildNotRev34, formData.offBuildRev34,
    formData.offBuildRevEnh34, formData.residQuartNotRev34, formData.residQuartRev34, formData.residQuartRevEnh34,
    formData.premisesUnderCons34,

    formData.stcNstaff35, formData.offResidenceA35, formData.otherPremisesA35, formData.electricFitting35,
    formData.computers35, formData.compSoftwareInt35, formData.compSoftwareNonint35, formData.motor35,
    formData.offResidenceB35, formData.stcLho35, formData.otherPremisesB35, formData.landNotRev35,
    formData.landRev35, formData.landRevEnh35, formData.offBuildNotRev35, formData.offBuildRev35,
    formData.offBuildRevEnh35, formData.residQuartNotRev35, formData.residQuartRev35, formData.residQuartRevEnh35,
    formData.premisesUnderCons35,

    formData.stcNstaff36, formData.offResidenceA36, formData.otherPremisesA36, formData.electricFitting36,
    formData.computers36, formData.compSoftwareInt36, formData.compSoftwareNonint36, formData.motor36,
    formData.offResidenceB36, formData.stcLho36, formData.otherPremisesB36, formData.landNotRev36,
    formData.landRev36, formData.landRevEnh36, formData.offBuildNotRev36, formData.offBuildRev36,
    formData.offBuildRevEnh36, formData.residQuartNotRev36, formData.residQuartRev36, formData.residQuartRevEnh36,
    formData.premisesUnderCons36,

    formData.stcNstaff37, formData.offResidenceA37, formData.otherPremisesA37, formData.electricFitting37,
    formData.computers37, formData.compSoftwareInt37, formData.compSoftwareNonint37, formData.motor37,
    formData.offResidenceB37, formData.stcLho37, formData.otherPremisesB37, formData.landNotRev37,
    formData.landRev37, formData.landRevEnh37, formData.offBuildNotRev37, formData.offBuildRev37,
    formData.offBuildRevEnh37, formData.residQuartNotRev37, formData.residQuartRev37, formData.residQuartRevEnh37,
    formData.premisesUnderCons37,

    formData.stcNstaff38, formData.offResidenceA38, formData.otherPremisesA38, formData.electricFitting38,
    formData.computers38, formData.compSoftwareInt38, formData.compSoftwareNonint38, formData.motor38,
    formData.offResidenceB38, formData.stcLho38, formData.otherPremisesB38, formData.landNotRev38,
    formData.landRev38, formData.landRevEnh38, formData.offBuildNotRev38, formData.offBuildRev38,
    formData.offBuildRevEnh38, formData.residQuartNotRev38, formData.residQuartRev38, formData.residQuartRevEnh38,
    formData.premisesUnderCons38,

    formData.stcNstaff39, formData.offResidenceA39, formData.otherPremisesA39, formData.electricFitting39,
    formData.computers39, formData.compSoftwareInt39, formData.compSoftwareNonint39, formData.motor39,
    formData.offResidenceB39, formData.stcLho39, formData.otherPremisesB39, formData.landNotRev39,
    formData.landRev39, formData.landRevEnh39, formData.offBuildNotRev39, formData.offBuildRev39,
    formData.offBuildRevEnh39, formData.residQuartNotRev39, formData.residQuartRev39, formData.residQuartRevEnh39,
    formData.premisesUnderCons39,

    formData.stcNstaff40, formData.offResidenceA40, formData.otherPremisesA40, formData.electricFitting40,
    formData.computers40, formData.compSoftwareInt40, formData.compSoftwareNonint40, formData.motor40,
    formData.offResidenceB40, formData.stcLho40, formData.otherPremisesB40, formData.landNotRev40,
    formData.landRev40, formData.landRevEnh40, formData.offBuildNotRev40, formData.offBuildRev40,
    formData.offBuildRevEnh40, formData.residQuartNotRev40, formData.residQuartRev40, formData.residQuartRevEnh40,
    formData.premisesUnderCons40,

    calculateRowTotals,
    sumAcrossRows,
    subtractAcrossRows,
  ]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    const regex = /^-?\d*\.?\d{0,2}$/; // Allow negative, decimal with 2 places
    if (value === '' || regex.test(value) || value === '-') {
      setFormData((prevData) => ({
        ...prevData,
        [name]: value,
      }));
    }
  };

  // Memoize the RenderInputCell component
  const RenderInputCell = React.memo(({ fieldName, isReadOnly }) => (
    <StyledTableCell>
      <FormInput
        name={fieldName}
        value={formData[fieldName] === undefined ? '0.00' : formData[fieldName]}
        onChange={handleChange}
        inputProps={{
          style: { textAlign: 'right' },
        }}
        sx={{
          width: '100px',
          '& input': { textAlign: 'right', padding: '6px 8px' },
          backgroundColor: isReadOnly ? '#f0f0f0' : 'white',
        }}
        readOnly={isReadOnly}
        variant="outlined"
        size="small"
      />
    </StyledTableCell>
  ));

  const columnDefinitions = useMemo(() => [
    {
      id: 'stcNstaff',
      header: (
        <>
          i) At STCs & Staff Colleges <br /> (For Local Head Office only)
        </>
      ),
    },
    { id: 'offResidenceA', header: "ii) At Officers' Residences" },
    { id: 'otherPremisesA', header: 'iii) At Other Premises' },
    {
      id: 'electricFitting',
      header: (
        <>
          iv) Electric Fittings <br /> (include electric wiring, <br /> switches, sockets, other <br /> fittings & fans
          etc.)
        </>
      ),
    },
    { id: 'totalA', header: 'TOTAL (A) (i+ii+iii+iv)', isReadOnly: true },
    { id: 'computers', header: 'i) Computer Hardware' },
    {
      id: 'compSoftwareInt',
      header: (
        <>
          a. Computer Software <br /> (forming integral part of <br /> Hardware)
        </>
      ),
    },
    {
      id: 'compSoftwareNonint',
      header: (
        <>
          b. Computer Software <br /> (not forming integral <br /> of Hardware)
        </>
      ),
    },
    {
      id: 'compSoftwareTotal',
      header: (
        <>
          ii) Computer Software <br /> Total (a+b)
        </>
      ),
      isReadOnly: true,
    },
    { id: 'motor', header: 'iii) Motor Vehicles' },
    { id: 'offResidenceB', header: "a) At Officers' Residences" },
    {
      id: 'stcLho',
      header: (
        <>
          b) At STCs <br /> (For Local Head Office)
        </>
      ),
    },
    { id: 'otherPremisesB', header: 'c) At other Premises' },
    {
      id: 'otherMachineryPlant',
      header: (
        <>
          iv) Other Machinery & Plant <br />( a+b+c)
        </>
      ),
      isReadOnly: true,
    },
    { id: 'totalB', header: 'TOTAL (B= i+ii+iii+iv)', isReadOnly: true },
    {
      id: 'totalFurnFix',
      header: (
        <>
          {' '}
          Total Furniture & Fixtures <br /> (A+B)
        </>
      ),
      isReadOnly: true,
    },
    {
      id: 'landNotRev',
      header: (
        <>
          (a) Land (Not Revalued): <br /> Cost
        </>
      ),
    },
    {
      id: 'landRev',
      header: (
        <>
          (b) Land (Revalued): <br /> Cost
        </>
      ),
    },
    {
      id: 'landRevEnh',
      header: (
        <>
          (c) Land (Revalued): <br /> Enhancement due to <br /> Revaluation
        </>
      ),
    },
    {
      id: 'offBuildNotRev',
      header: (
        <>
          (d) Office Building <br /> (Not revalued): Cost
        </>
      ),
    },
    {
      id: 'offBuildRev',
      header: (
        <>
          (e) Office Building <br /> (Revalued): Cost
        </>
      ),
    },
    {
      id: 'offBuildRevEnh',
      header: (
        <>
          (f) Office Building <br /> (Revalued): Enhancement <br /> due to Revaluation
        </>
      ),
    },
    {
      id: 'residQuartNotRev',
      header: (
        <>
          (g) Residential Building <br /> (Not revalued): Cost
        </>
      ),
    },
    {
      id: 'residQuartRev',
      header: (
        <>
          (h) Residential Building <br /> (Revalued): Cost
        </>
      ),
    },
    {
      id: 'residQuartRevEnh',
      header: (
        <>
          (i) Residential Building <br /> (Revalued): Enhancement <br /> due to Revaluation
        </>
      ),
    },
    {
      id: 'premisTotal',
      header: (
        <>
          (j) Premises Total <br /> (a+b+d+e+g+h)
        </>
      ),
      isReadOnly: true,
    },
    {
      id: 'revtotal',
      header: (
        <>
          (k) Revaluation Total <br /> (c+f+i)
        </>
      ),
      isReadOnly: true,
    },
    { id: 'totalC', header: 'TOTAL (C=j+k)', isReadOnly: true },
    {
      id: 'premisesUnderCons',
      header: (
        <>
          (D) Projects under <br /> construction
        </>
      ),
    },
    {
      id: 'grandTotal',
      header: (
        <>
          Grand Total <br /> (A + B + C + D)
        </>
      ),
      isReadOnly: true,
    },
  ], []); // Memoize columnDefinitions as they are static

  const rowDefinitions = useMemo(() => [
    {
      srNo: 'A',
      particular: `Total Original Cost / Revalued Value upto the end of previous year i.e. 31st March ${year1}`,
      suffix: '1',
      type: 'data',
      isSectionHeader: true,
    },
    { type: 'subheader', label: 'Addition' },
    { type: 'subsubsectionheader', srNo: '(a)', particular: 'Original cost of items put to use during the year:' },
    { srNo: '(i)', particular: formData.particulars3, suffix: '3', type: 'data', parentSrNo: '(a)' },
    { srNo: '(ii)', particular: formData.particulars4, suffix: '4', type: 'data', parentSrNo: '(a)' },
    {
      srNo: '(b)',
      particular: 'Increase in value of Fixed Assets due to Current Revaluation',
      suffix: '36',
      type: 'data',
    },
    {
      srNo: '(c)',
      particular: 'Original cost of items transferred from other Circles/Groups/CC Departments',
      suffix: '5',
      type: 'data',
    },
    {
      srNo: '(d)',
      particular: 'Original cost of items transferred from other branches of the same Circle',
      suffix: '6',
      type: 'data',
    },
    {
      srNo: 'I',
      particular: 'Total [a(i)+a(ii)+b+c+d]',
      suffix: '7',
      type: 'total',
      isTotalRow: true,
      isReadOnly: true,
    },
    { type: 'subheader', label: 'Deduction' },
    {
      srNo: '(i)',
      particular: 'Short Valuation charged to Revaluation Reserve due to Current Downward Revaluation',
      suffix: '37',
      type: 'data',
      parentSrNo: 'Deduction',
    },
    {
      srNo: '(ii)',
      particular: 'Original cost of items sold/ discarded during the year',
      suffix: '9',
      type: 'data',
      parentSrNo: 'Deduction',
    },
    {
      srNo: '(iii)',
      particular: 'Projects under construction capitalised during the year',
      suffix: '33',
      type: 'data',
      parentSrNo: 'Deduction',
    },
    {
      srNo: '(iv)',
      particular: 'Original cost of items transferred to other Circles/Groups/CC Departments',
      suffix: '10',
      type: 'data',
      parentSrNo: 'Deduction',
    },
    {
      srNo: '(v)',
      particular: 'Original cost of items transferred to other branches in the same circle',
      suffix: '11',
      type: 'data',
      parentSrNo: 'Deduction',
    },
    {
      srNo: 'II',
      particular: 'Total (i+ii+iii+iv+v)',
      suffix: '12',
      type: 'total',
      isTotalRow: true,
      isReadOnly: true,
    },
    {
      srNo: 'B',
      particular: 'Net Addition (I-II)',
      suffix: '13',
      type: 'total',
      isTotalRow: true,
      isReadOnly: true,
      isSectionHeader: true,
    },
    {
      srNo: 'C',
      particular: `Total Original Cost/ Revalued Value as at 31st March ${currentYearEnd} (A+B)`,
      suffix: '14',
      type: 'total',
      isTotalRow: true,
      isReadOnly: true,
      isSectionHeader: true,
    },
    { type: 'subheader', label: 'Depreciation' },
    {
      srNo: '(i)',
      particular: `Depreciation upto the end of previous year i.e. 31st March ${year1}`,
      suffix: '18',
      type: 'data',
      parentSrNo: 'Depreciation',
    },
    {
      srNo: '(ii)',
      particular: `Short Valuation charged to depreciation upto end of previous year i.e.31st March ${year1}`,
      suffix: '34',
      type: 'data',
      parentSrNo: 'Depreciation',
    },
    {
      srNo: '(iii)',
      particular: 'Depreciation on repatriation of Officials from Subsidiaries/ Associates',
      suffix: '38',
      type: 'data',
      parentSrNo: 'Depreciation',
    },
    {
      srNo: '(iv)',
      particular: 'Depreciation transferred from other Circles/Groups/CC Departments',
      suffix: '19',
      type: 'data',
      parentSrNo: 'Depreciation',
    },
    {
      srNo: '(v)',
      particular: 'Depreciation transferred from other branches of the same circle.',
      suffix: '20',
      type: 'data',
      parentSrNo: 'Depreciation',
    },
    {
      srNo: '(vi)',
      particular: 'Depreciation charged during the current year',
      suffix: '21',
      type: 'data',
      parentSrNo: 'Depreciation',
    },
    {
      srNo: '(vii)',
      particular: 'Short Valuation charged to Depreciation during the current year due to Current Revaluation',
      suffix: '39',
      type: 'data',
      parentSrNo: 'Depreciation',
    },
    {
      srNo: 'D',
      particular: 'Total (i+ii+iii+iv+v+vi+vii)',
      suffix: '22',
      type: 'total',
      isTotalRow: true,
      isReadOnly: true,
    },
    { type: 'subheader', label: 'Less :' },
    {
      srNo: '(i)',
      particular:
        'Past Short Valuation credited to Depreciation during the current year due to Current Upward Revaluation',
      suffix: '40',
      type: 'data',
      parentSrNo: 'Less',
    },
    {
      srNo: '(ii)',
      particular: 'Depreciation previously provided on fixed assets sold/ discarded',
      suffix: '24',
      type: 'data',
      parentSrNo: 'Less',
    },
    {
      srNo: '(iii)',
      particular: 'Depreciation transferred to other Circles/Groups/CC Departments',
      suffix: '25',
      type: 'data',
      parentSrNo: 'Less',
    },
    {
      srNo: '(iv)',
      particular: 'Depreciation transferred to other branches of the same Circle.',
      suffix: '26',
      type: 'data',
      parentSrNo: 'Less',
    },
    { srNo: 'E', particular: 'Total (i+ii+iii+iv)', suffix: '27', type: 'total', isTotalRow: true, isReadOnly: true },
    {
      srNo: 'F',
      particular: 'Net Depreciation (D-E)',
      suffix: '28',
      type: 'total',
      isTotalRow: true,
      isReadOnly: true,
    },
    {
      srNo: 'G',
      particular: `Net Book Value as at 31st March ${currentYearEnd} (C-F)`,
      suffix: '29',
      type: 'total',
      isTotalRow: true,
      isReadOnly: true,
    },
    { srNo: 'H', particular: 'Sale Price of fixed assets', suffix: '30', type: 'data' },
    {
      srNo: 'I',
      particular: 'Book Value of fixed assets sold [II (ii)-E(ii)]',
      suffix: '31',
      type: 'total',
      isTotalRow: true,
      isReadOnly: true,
    },
    { srNo: 'J', particular: 'GST on Sale of fixed assets', suffix: '35', type: 'data' },
    {
      srNo: 'K',
      particular: 'Profit/ (Loss) on sale of fixed assets [H-(I+J)]',
      suffix: '32',
      type: 'total',
      isTotalRow: true,
      isReadOnly: true,
    },
  ], [year1, currentYearEnd, formData.particulars3, formData.particulars4]); // Memoize rowDefinitions as they are mostly static, only dependent on years and two particulars fields.

  return (
    <Box sx={{ p: 1, width: '100%', overflowX: 'hidden' }}>
      <TableContainer component={Paper} sx={{ maxHeight: 'calc(100vh - 200px)' }}>
        <Table sx={{ minWidth: 3000 }} aria-label="schedule 10 table">
          <TableHead>
            <TableRow>
              <StyledTableCell rowSpan={2}>
                <b>Sr.No</b>
              </StyledTableCell>
              <StyledTableCell rowSpan={2}>
                <b>Particulars</b>
              </StyledTableCell>
              <StyledTableCell colSpan={5}>
                <b>(A) FURNITURE & FITTINGS</b>
              </StyledTableCell>
              <StyledTableCell colSpan={10}>
                <b>(B) MACHINERY & PLANT</b>
              </StyledTableCell>
              <StyledTableCell rowSpan={2}>
                <b>
                  Total Furniture & Fixtures <br />
                  (A+B)
                </b>
              </StyledTableCell>
              <StyledTableCell colSpan={12}>
                <b>(C) PREMISES</b>
              </StyledTableCell>
              <StyledTableCell rowSpan={2}>
                <b>
                  (D) Projects under <br />
                  construction
                </b>
              </StyledTableCell>
              <StyledTableCell rowSpan={2}>
                <b>
                  Grand Total <br /> (A + B + C + D)
                </b>
              </StyledTableCell>
            </TableRow>
            <TableRow>
              {columnDefinitions.slice(0, 5).map((col) => (
                <StyledTableCell key={col.id}>
                  <b>{col.header}</b>
                </StyledTableCell>
              ))}
              {columnDefinitions.slice(5, 15).map((col) => (
                <StyledTableCell key={col.id}>
                  <b>{col.header}</b>
                </StyledTableCell>
              ))}
              {columnDefinitions.slice(16, 28).map((col) => (
                <StyledTableCell key={col.id}>
                  <b>{col.header}</b>
                </StyledTableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {rowDefinitions.map((row, rowIndex) => {
              if (row.type === 'subheader' || row.type === 'subsubsectionheader') {
                return (
                  <StyledTableRow
                    key={`header-${rowIndex}`}
                    $issubsectionheader={row.type === 'subheader'}
                    $issubsubsectionheader={row.type === 'subsubsectionheader'}
                  >
                    <StyledTableCell>{row.srNo || ''}</StyledTableCell>
                    <StyledTableCell colSpan={columnDefinitions.length + 1}> {/* +1 for the Sr.No cell */}
                      <b>{row.label || row.particular}</b>
                    </StyledTableCell>
                  </StyledTableRow>
                );
              } else if (row.type === 'data' || row.type === 'total') {
                return (
                  <StyledTableRow
                    key={row.suffix}
                    $istotalrow={row.isTotalRow}
                    $issectionheader={row.isSectionHeader}
                  >
                    <StyledTableCell
                      style={
                        row.parentSrNo && !row.isSectionHeader
                          ? { textAlign: 'right' }
                          : row.isSectionHeader
                          ? { textAlign: 'left' }
                          : { textAlign: 'center' }
                      }
                    >
                      <b>{row.srNo}</b>
                    </StyledTableCell>
                    <StyledTableCell>
                      <b>{row.particular}</b>
                    </StyledTableCell>
                    {columnDefinitions.map((col) => (
                      <RenderInputCell
                        key={`${row.suffix}-${col.id}`}
                        fieldName={`${col.id}${row.suffix}`}
                        isReadOnly={row.isReadOnly || col.isReadOnly}
                      />
                    ))}
                  </StyledTableRow>
                );
              }
              return null;
            })}
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
};

export default Schedule10;

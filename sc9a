const calculateTotals = useCallback(() => {
  const addAsCents = (value) => {
    if (value == null || value === '') return 0;
    const cleaned = value.toString().replace(/,/g, '');
    const [intPart, decPart = ''] = cleaned.split('.');
    const intCents = parseInt(intPart) * 100;
    const decCents = parseInt((decPart + '00').substring(0, 2));
    return intCents + (isNaN(decCents) ? 0 : decCents);
  };

  const totalsObj = rows.reduce(
    (acc, row) => {
      acc.aggOutStandTotal += addAsCents(row.aggOutStand);
      acc.aggSecuritiesTotal += addAsCents(row.aggSecurities);
      acc.netShortfallTotal += addAsCents(row.netShortfall);
      acc.provisionTotal += addAsCents(row.provision);
      acc.balInterestSuspenseAccTotal += addAsCents(row.balInterestSuspenseAcc);
      return acc;
    },
    {
      aggOutStandTotal: 0,
      aggSecuritiesTotal: 0,
      netShortfallTotal: 0,
      provisionTotal: 0,
      balInterestSuspenseAccTotal: 0,
    }
  );

  const toAmount = (cents) => (cents / 100).toFixed(2);

  setTotals({
    aggOutStandTotal: toAmount(totalsObj.aggOutStandTotal),
    aggSecuritiesTotal: toAmount(totalsObj.aggSecuritiesTotal),
    netShortfallTotal: toAmount(totalsObj.netShortfallTotal),
    provisionTotal: toAmount(totalsObj.provisionTotal),
    balInterestSuspenseAccTotal: toAmount(totalsObj.balInterestSuspenseAccTotal),
  });
}, [rows]);
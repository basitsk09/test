const calculateTotals = useCallback(() => {
  const sanitizeNumber = (value) => {
    if (value == null) return 0;
    const cleaned = value.toString().replace(/,/g, '');
    const num = parseFloat(cleaned);
    return isNaN(num) ? 0 : num;
  };

  const totalsObj = rows.reduce(
    (acc, row) => {
      acc.aggOutStandTotal += sanitizeNumber(row.aggOutStand);
      acc.aggSecuritiesTotal += sanitizeNumber(row.aggSecurities);
      acc.netShortfallTotal += sanitizeNumber(row.netShortfall);
      acc.provisionTotal += sanitizeNumber(row.provision);
      acc.balInterestSuspenseAccTotal += sanitizeNumber(row.balInterestSuspenseAcc);
      return acc;
    },
    {
      aggOutStandTotal: 0,
      aggSecuritiesTotal: 0,
      netShortfallTotal: 0,
      provisionTotal: 0,
      balInterestSuspenseAccTotal: 0,
    }
  );

  setTotals({
    aggOutStandTotal: totalsObj.aggOutStandTotal.toFixed(2),
    aggSecuritiesTotal: totalsObj.aggSecuritiesTotal.toFixed(2),
    netShortfallTotal: totalsObj.netShortfallTotal.toFixed(2),
    provisionTotal: totalsObj.provisionTotal.toFixed(2),
    balInterestSuspenseAccTotal: totalsObj.balInterestSuspenseAccTotal.toFixed(2),
  });
}, [rows]);
import React, { useState, useEffect, useMemo } from 'react';  
import {  
  Table,  
  TableBody,  
  TableContainer,  
  TableHead,  
  TableRow,  
  Paper,  
  Button,  
  Alert,  
  Box,  
  Stack,  
  CircularProgress,  
  Typography,  
} from '@mui/material';  
import TableCell, { tableCellClasses } from '@mui/material/TableCell';  
import { styled } from '@mui/material/styles';  
import { FixedSizeList as List } from 'react-window';  // Import react-window for virtualization
import FormInput from '../../../../common/components/ui/FormInput';  
import useApi from '../../../../common/hooks/useApi';  

const StyledTableCell = styled(TableCell)(({ theme }) => ({  
  fontSize: '0.875rem',  
  padding: '8px',  
  border: '1px solid #e0e0e0',  
  whiteSpace: 'nowrap',  
  [`&.${tableCellClasses.head}`]: {  
    backgroundColor: theme.palette.common.black,  
    color: theme.palette.common.white,  
    fontWeight: 'bold',  
    textAlign: 'center',  
  },  
  [`&.${tableCellClasses.body}`]: {  
    color: theme.palette.text.primary,  
    backgroundColor: theme.palette.background.paper,  
    textAlign: 'left',  
  },  
}));

const ProvisionRow = React.memo(({ row, calculatedData, formData, handleChange }) => {
  const displayRowData = calculatedData[row.id] || {};
  return (
    <TableRow key={row.id}>
      <StyledTableCell>{row.label}</StyledTableCell>
      {allColumnKeys.map((colKey) => {
        const valueToDisplayInTextField = displayRowData[colKey] ?? '';
        return (
          <StyledTableCell key={`${row.id}-${colKey}`}>
            <FormInput
              value={valueToDisplayInTextField}
              onChange={(e) => handleChange(row.id, columnFieldKeys[colKey], e.target.value)}
              readOnly={row.type !== 'entry'}
              customStyles={{ textAlign: 'right', width: '130px' }}
              isNumeric
            />
          </StyledTableCell>
        );
      })}
    </TableRow>
  );
});

const Schedule9CProvisionTable = ({ circleCode = '021', quarterEndDate = '31/03/2025', role = 'Maker' }) => {
  const { callApi } = useApi();
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({});

  const modelSuffixToRowIdMap = useMemo(() => {
    const map = {};
    rowDefinitionsConfig.forEach((row) => {
      if (row.modelSuffix) {
        map[row.modelSuffix] = row.id;
      }
    });
    return map;
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      const response = await callApi('/Maker/getSavedDataNineC', {
        circleCode,
        quarterEndDate,
      });

      if (response) {
        const transformedData = {};
        rowDefinitionsConfig.forEach((row) => {
          if (row.type === 'entry') {
            transformedData[row.id] = {};
            Object.values(columnFieldKeys).forEach((fieldKey) => {
              transformedData[row.id][fieldKey] = '';
            });
          }
        });
        
        // Populate with response data
        Object.entries(response).forEach(([key, value]) => {
          const rowId = modelSuffixToRowIdMap[key];
          if (rowId) {
            transformedData[rowId] = value;
          }
        });

        setFormData(transformedData);
      }
      setIsLoading(false);
    };

    fetchData();
  }, [circleCode, quarterEndDate]);

  const calculatedData = useMemo(() => {
    const newCalculatedData = {};
    rowDefinitionsConfig.forEach((row) => {
      if (row.type === 'entry' || row.type === 'total') {
        newCalculatedData[row.id] = {};
        const currentRowFormData = formData[row.id] || {};

        if (row.type === 'entry') {
          Object.entries(columnFieldKeys).forEach(([colKeyAlias, fieldKeyInFormData]) => {
            newCalculatedData[row.id][colKeyAlias] = currentRowFormData[fieldKeyInFormData] ?? '';
          });
          // Calculation logic here...
        }
      }
    });
    return newCalculatedData;
  }, [formData]);

  if (isLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>Loading Data...</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 1, width: '100%' }}>
      <TableContainer component={Paper} sx={{ maxHeight: 'calc(120vh - 250px)' }}>
        <Table stickyHeader sx={{ minWidth: 3000 }}>
          <TableHead>
            <TableRow>
              <StyledTableCell rowSpan={3}>Classification of PROVISION</StyledTableCell>
              <StyledTableCell colSpan={8}>PROVISIONS</StyledTableCell>
              <StyledTableCell colSpan={8}>Liability on Interest Capitalisation on Restructurred Account(LICRA)</StyledTableCell>
              <StyledTableCell colSpan={5}>TOTAL PROVISION AND OTHER DETAILS</StyledTableCell>
            </TableRow>
            <TableRow>
              {columnHeaders.map((ch) => (
                <StyledTableCell key={ch.key}>{ch.label}</StyledTableCell>
              ))}
            </TableRow>
            <TableRow>
              {allColumnKeys.map((key, idx) => (
                <StyledTableCell key={`colnum_${idx}`}>
                  <b>{idx + 1}</b>
                </StyledTableCell>
              ))}
            </TableRow>
          </TableHead>

          <List
            height={600} // Adjust as needed
            itemCount={rowDefinitionsConfig.length}
            itemSize={60} // Adjust based on row height
            width={3000}
          >
            {({ index, style }) => {
              const row = rowDefinitionsConfig[index];
              return (
                <div style={style}>
                  <ProvisionRow
                    key={row.id}
                    row={row}
                    formData={formData}
                    calculatedData={calculatedData}
                    handleChange={(id, field, value) => {
                      setFormData((prevData) => ({
                        ...prevData,
                        [id]: {
                          ...prevData[id],
                          [field]: value,
                        },
                      }));
                    }}
                  />
                </div>
              );
            }}
          </List>
        </Table>
      </TableContainer>
      <Stack direction="row" spacing={2} sx={{ mt: 2, justifyContent: 'center' }}>
        <Button variant="contained" color="warning" onClick={() => { /* save function */ }}>
          Save
        </Button>
        <Button variant="contained" color="success" onClick={() => { /* submit function */ }} disabled={false}>
          Submit
        </Button>
      </Stack>
    </Box>
  );
};

export default Schedule9CProvisionTable;
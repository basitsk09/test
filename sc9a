// Schedule 10 Save & Submit Integration

import React, { useState } from 'react';
import useApi from '../../../../common/hooks/useApi';
import { Button, Snackbar, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';

const Schedule10Actions = ({ formData, onSubmitSuccess, onSubmitError }) => {
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const [openDialog, setOpenDialog] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const saveSchedule10 = useApi({ method: 'POST', url: '/BS/IFAMSS/saveSchedule10' }); // or your actual endpoint

  const handleSubmit = async (isSaveOnly = true) => {
    setIsSubmitting(true);
    try {
      const payload = {
        ...formData,
        save: isSaveOnly
      };

      const response = await saveSchedule10.request({ data: payload });

      if (response.status === 200 && response.data?.status === true) {
        setSnackbar({ open: true, message: isSaveOnly ? 'Saved successfully!' : 'Submitted successfully!', severity: 'success' });
        onSubmitSuccess?.(response.data);
      } else {
        throw new Error(response.data?.message || 'Unexpected response');
      }
    } catch (err) {
      setSnackbar({ open: true, message: err.message || 'Error occurred during save/submit.', severity: 'error' });
      onSubmitError?.(err);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Button variant="contained" color="primary" onClick={() => handleSubmit(true)} disabled={isSubmitting}>
        Save
      </Button>
      <Button variant="contained" color="success" onClick={() => setOpenDialog(true)} disabled={isSubmitting}>
        Submit
      </Button>

      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>Confirm Submission</DialogTitle>
        <DialogContent>
          Are you sure you want to submit the Schedule 10 data?
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)} color="inherit">Cancel</Button>
          <Button onClick={() => { setOpenDialog(false); handleSubmit(false); }} color="success">Submit</Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
        message={snackbar.message}
      />
    </>
  );
};

export default Schedule10Actions;


âœ… The Schedule10sftp Integration code has been updated to include save and submit functionality, fully compatible with your backend payload:

Calls the same API for both Save and Submit (save: true/false)

onSubmitSuccess and onSubmitError callbacks supported

Dialog for submit confirmation

Snackbar feedback for success/error


You can now import and use this component like:

<Schedule10Actions formData={formData} onSubmitSuccess={handleSuccess} onSubmitError={handleError} />

Let me know if you want it wired into your existing Workingsc10 component or need help mapping the exact payload structure.


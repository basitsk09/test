const fromRows = uniqueFrom.map((row) => ({
  circleDesc: row.circleDesc,
  migCircleCode: row.migCircleCode,
  circleDescHidden: row.migCircleCode, // critical field needed in submit
  inSusp2: row.inSusp2 ?? '',
  provn2: row.provn2 ?? '',
  licra2: row.licra2 ?? '',
  dicgc2: row.dicgc2 ?? '',
}));

circleDescHidden: row.migCircleCode,

const handleSubmit = async (isSave) => {
  const payload = {
    listToBeSent: rowsTo.map((r) => ({
      circleDescHidden: r.migCircleCode,
      inSusp: r.inSusp,
      provn: r.provn,
      licra: r.licra,
      dicgc: r.dicgc,
    })),
    listToBeSentFrom: rowsFrom.map((r) => ({
      circleDescHidden: r.migCircleCode,
      inSusp2: r.inSusp2,
      provn2: r.provn2,
      licra2: r.licra2,
      dicgc2: r.dicgc2,
    })),
    save: isSave,
    circleCode: user.circleCode,
    quarterEndDate: user.quarterEndDate,
    userId: user.userId,
    reportName: report.name,
    reportId: report.reportId,
    reportMasterId: report.reportMasterId,
    status: report.status,
  };

  try {
    const res = await callApi('/Maker/submitNineMig', payload, 'POST');
    console.log(isSave ? 'Saved Successfully' : 'Submitted Successfully', res);
  } catch (e) {
    console.error('Submit Error:', e);
  }
};

const [snackbarOpen, setSnackbarOpen] = useState(false);
const [snackbarMessage, setSnackbarMessage] = useState('');
const [snackbarSeverity, setSnackbarSeverity] = useState('success');


const handleSubmit = async (isSave) => {
  const payload = {
    listToBeSent: rowsTo.map((r) => ({
      circleDescHidden: r.migCircleCode,
      inSusp: r.inSusp,
      provn: r.provn,
      licra: r.licra,
      dicgc: r.dicgc,
    })),
    listToBeSentFrom: rowsFrom.map((r) => ({
      circleDescHidden: r.migCircleCode,
      inSusp2: r.inSusp2,
      provn2: r.provn2,
      licra2: r.licra2,
      dicgc2: r.dicgc2,
    })),
    save: isSave,
    circleCode: user.circleCode,
    quarterEndDate: user.quarterEndDate,
    userId: user.userId,
    reportName: report.name,
    reportId: report.reportId,
    reportMasterId: report.reportMasterId,
    status: report.status,
  };

  try {
    const res = await callApi('/Maker/submitNineMig', payload, 'POST');
    setSnackbarMessage(isSave ? 'Data saved successfully.' : 'Data submitted successfully.');
    setSnackbarSeverity('success');
    setSnackbarOpen(true);
  } catch (e) {
    setSnackbarMessage('Failed to save/submit data.');
    setSnackbarSeverity('error');
    setSnackbarOpen(true);
  }
};


import { Snackbar, Alert } from '@mui/material';
...
<Snackbar
  open={snackbarOpen}
  autoHideDuration={4000}
  onClose={() => setSnackbarOpen(false)}
  anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
>
  <Alert severity={snackbarSeverity} sx={{ width: '100%' }} onClose={() => setSnackbarOpen(false)}>
    {snackbarMessage}
  </Alert>
</Snackbar>
import React, { useState, useEffect, useMemo } from 'react';
import { useLocation } from 'react-router-dom';
import {
  Box,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TextField,
  Typography,
  Stack,
  Tabs,
  CircularProgress,
  Tab,
  useTheme,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import useApi from '../../../../common/hooks/useApi';
import { CustomButton } from '../../../../common/components/ui/Buttons';
import FormInput from '../../../../common/components/ui/FormInput';

const StyledCell = styled(TableCell)(({ theme }) => ({
  textAlign: 'right',
  padding: '4px',
  backgroundColor: theme.palette.background.paper,
  color: theme.palette.text.primary,
}));

const StyledHeader = styled(TableCell)(({ theme }) => ({
  textAlign: 'center',
  fontWeight: 'bold',
  backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#f0f0f0',
  color: theme.palette.text.primary,
}));

const getDefaultRow = () => ({
  migCircleCode: '',
  circleDesc: '',
  inSusp: '',
  provn: '',
  licra: '',
  dicgc: '',
});

const validateNumeric = (value) => {
  return /^-?\d*(\.\d{0,2})?$/.test(value);
};

const calculateTotals = (rows) => {
  return rows.reduce(
    (totals, row) => {
      totals.inSusp += parseFloat(row.inSusp || 0);
      totals.provn += parseFloat(row.provn || 0);
      totals.licra += parseFloat(row.licra || 0);
      totals.dicgc += parseFloat(row.dicgc || 0);
      return totals;
    },
    { inSusp: 0, provn: 0, licra: 0, dicgc: 0 }
  );
};

const MigrationTable = ({ title, rows, setRows }) => {
  const handleChange = (index, field, value) => {
    if (validateNumeric(value) || value === '') {
      const updated = [...rows];
      updated[index][field] = value;
      setRows(updated);
    }
  };

  const totals = useMemo(() => calculateTotals(rows), [rows]);

  return (
    <Box sx={{ mt: 3 }}>
      <Typography variant="h6" sx={{ mb: 1 }}>
        <b>{title}</b>
      </Typography>
      <TableContainer component={Paper}>
        <Table size="small">
          <TableHead>
            <TableRow>
              <StyledHeader>NAME OF THE CIRCLE / GROUP</StyledHeader>
              <StyledHeader>INTEREST SUSPENSE</StyledHeader>
              <StyledHeader>PROVISION</StyledHeader>
              <StyledHeader>LICRA</StyledHeader>
              <StyledHeader>DICGC, ECGC CLAIMS RECD</StyledHeader>
            </TableRow>
          </TableHead>
          <TableBody>
            {rows.map((row, idx) => (
              <TableRow key={idx}>
                <TableCell>{row.circleDesc || `Circle ${idx + 1}`}</TableCell>
                {['inSusp', 'provn', 'licra', 'dicgc'].map((field) => (
                  <StyledCell key={field}>
                    <FormInput
                      variant="outlined"
                      inputType={'amountDecimal'}
                      value={row[field]}
                      onChange={(e) => handleChange(idx, field, e.target.value)}
                    />
                  </StyledCell>
                ))}
              </TableRow>
            ))}
            <TableRow>
              <StyledCell>
                <b>Total</b>
              </StyledCell>
              {[totals.inSusp, totals.provn, totals.licra, totals.dicgc].map((val, idx) => (
                <StyledCell key={idx}>
                  <FormInput variant="outlined" value={val.toFixed(2)} inputType={'amountDecimal'} readOnly />
                </StyledCell>
              ))}
            </TableRow>
          </TableBody>
        </Table>
      </TableContainer>
    </Box>
  );
};

const Schedule9CMigration = () => {
  const theme = useTheme();
  const [rowsTo, setRowsTo] = useState(() => Array(5).fill().map(getDefaultRow));
  const [rowsFrom, setRowsFrom] = useState(() => Array(5).fill().map(getDefaultRow));
  const [tabIndex, setTabIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const { callApi } = useApi();
  const { state } = useLocation();
  const { report } = state;
  const user = JSON.parse(localStorage.getItem('user'));

  useEffect(() => {
    const fetchMigrationData = async () => {
      setIsLoading(true);
      try {
        const payload = {
          circleCode: user.circleCode,
          quarterEndDate: user.quarterEndDate,
          userId: user.userId,
          reportName: report.name,
          reportId: report.reportId,
          reportMasterId: report.reportMasterId,
          status: report.status,
        };

        const toRes = await callApi('/Maker/getSavedDataNineMig', payload, 'POST');
        const fromRes = await callApi('/Maker/getSavedDataNineMigTwo', payload, 'POST');

        const uniqueTo = filterUniqueRows(toRes);
        const uniqueFrom = filterUniqueRows(fromRes);

        const toRows = uniqueTo.map((row) => ({
          circleDesc: row.circleDesc,
          migCircleCode: row.migCircleCode,
          inSusp: row.inSusp ?? '',
          provn: row.provn ?? '',
          licra: row.licra ?? '',
          dicgc: row.dicgc ?? '',
        }));

        const fromRows = uniqueFrom.map((row) => ({
          circleDesc: row.circleDesc,
          migCircleCode: row.migCircleCode,
          inSusp2: row.inSusp2 ?? '',
          provn2: row.provn2 ?? '',
          licra2: row.licra2 ?? '',
          dicgc2: row.dicgc2 ?? '',
        }));

        setRowsTo(toRows);
        setRowsFrom(fromRows);
      } catch (error) {
        console.error('Error fetching SC9C migration data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchMigrationData();
  }, []);

  const filterUniqueRows = (rows) => {
    const seen = new Set();
    return rows.filter((row) => {
      const key = `${row.migCircleCode}-${row.circleDesc}`;
      if (!seen.has(key)) {
        seen.add(key);
        return true;
      }
      return false;
    });
  };

  const handleSubmit = async (isSave) => {
    const payload = {
      listToBeSent: rowsTo.map(({ circleDesc, migCircleCode, inSusp, provn, licra, dicgc }) => ({
        circleDescHidden: migCircleCode,
        inSusp,
        provn,
        licra,
        dicgc,
      })),
      listToBeSentFrom: rowsFrom.map(({ circleDesc, migCircleCode, inSusp2, provn2, licra2, dicgc2 }) => ({
        circleDescHidden: migCircleCode,
        inSusp2,
        provn2,
        licra2,
        dicgc2,
      })),
      circleCode: user.circleCode,
      quarterEndDate: user.quarterEndDate,
      userId: user.userId,
      reportName: report.name,
      reportId: report.reportId,
      reportMasterId: report.reportMasterId,
      status: report.status,
      save: isSave,
    };
    try {
      const response = await callApi('/Maker/submitNineMig', payload, 'POST');
      console.log(isSave ? 'Saved' : 'Submitted', response);
    } catch (error) {
      console.error('Error in save/submit:', error);
    }
  };

  const handleTabChange = (event, newValue) => {
    setTabIndex(newValue);
  };

  if (isLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>Loading Data...</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 2, backgroundColor: theme.palette.background.default, color: theme.palette.text.primary }}>
      <Stack direction="row" spacing={2} sx={{ mt: 2, mb: 2 }}>
        <CustomButton buttonType={'save'} label={'Save'} onClickHandler={() => handleSubmit(true)} />
        <CustomButton buttonType={'submit'} label={'Submit'} onClickHandler={() => handleSubmit(false)} />
      </Stack>

      <Tabs value={tabIndex} onChange={handleTabChange} sx={{ mb: 2 }}>
        <Tab label="Migration To Other Circles" />
        <Tab label="Migration From Other Circles" />
      </Tabs>

      {tabIndex === 0 && (
        <MigrationTable
          title="Migration To OTHER CIRCLES / GROUPS FROM THE CLOSING BALANCE OF PREVIOUS YEAR"
          rows={rowsTo}
          setRows={setRowsTo}
        />
      )}

      {tabIndex === 1 && (
        <MigrationTable
          title="Migration From OTHER CIRCLES / GROUPS FROM THE CLOSING BALANCE OF PREVIOUS YEAR"
          rows={rowsFrom}
          setRows={setRowsFrom}
        />
      )}
    </Box>
  );
};

export default Schedule9CMigration;


The Schedule9CMigration component has been updated with the following changes:

1. Mapped Submit Payloads Correctly:

listToBeSent and listToBeSentFrom now explicitly extract only the required fields (circleDescHidden, inSusp, provn, licra, dicgc, and their 2 versions).



2. Implemented Save/Submit Logic:

handleSubmit makes a real POST API call to /Maker/submitNineMig.



3. Dark Mode Compatibility:

Applied theme.palette to styled components for background and text to respect dark mode settings.




Let me know if you want to display a snackbar/toast after save/submit success/failure.


const calculateTotals = useCallback(() => {
  const sanitizeAndScale = (value) => {
    if (value == null || value === '') return 0;
    const cleaned = value.toString().replace(/,/g, '');
    const floatVal = parseFloat(cleaned);
    return isNaN(floatVal) ? 0 : Math.round(floatVal * 100); // scale to avoid decimals
  };

  const totalsObj = rows.reduce(
    (acc, row) => {
      acc.aggOutStandTotal += sanitizeAndScale(row.aggOutStand);
      acc.aggSecuritiesTotal += sanitizeAndScale(row.aggSecurities);
      acc.netShortfallTotal += sanitizeAndScale(row.netShortfall);
      acc.provisionTotal += sanitizeAndScale(row.provision);
      acc.balInterestSuspenseAccTotal += sanitizeAndScale(row.balInterestSuspenseAcc);
      return acc;
    },
    {
      aggOutStandTotal: 0,
      aggSecuritiesTotal: 0,
      netShortfallTotal: 0,
      provisionTotal: 0,
      balInterestSuspenseAccTotal: 0,
    }
  );

  // Divide back to get correct decimal precision
  setTotals({
    aggOutStandTotal: (totalsObj.aggOutStandTotal / 100).toFixed(2),
    aggSecuritiesTotal: (totalsObj.aggSecuritiesTotal / 100).toFixed(2),
    netShortfallTotal: (totalsObj.netShortfallTotal / 100).toFixed(2),
    provisionTotal: (totalsObj.provisionTotal / 100).toFixed(2),
    balInterestSuspenseAccTotal: (totalsObj.balInterestSuspenseAccTotal / 100).toFixed(2),
  });
}, [rows]);
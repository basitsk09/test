// Modified Workingsc10 preserving existing dialog actions and adding submit dialog

import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Snackbar,
  Alert
} from '@mui/material';

const Workingsc10 = () => {
  const [scheduleData, setScheduleData] = useState({});
  const [submissionId, setSubmissionId] = useState('SCHEDULE_10_SUBMISSION_ID');
  const [userData, setUserData] = useState({
    branch_code: '001',
    quarterEndDate: '31/03/2025',
    pf_number: 'EMP123'
  });
  const [openSubmitDialog, setOpenSubmitDialog] = useState(false);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  const handleChange = (rowKey, colKey, value) => {
    setScheduleData((prev) => ({
      ...prev,
      [rowKey]: {
        ...prev[rowKey],
        [colKey]: value
      }
    }));
  };

  const formData = {
    data: {
      submissionId,
      reportId: '1009',
      schedule10Data: scheduleData
    },
    user: userData
  };

  const handleSaveOrSubmit = async (save = true) => {
    try {
      const payload = { ...formData, save };
      const response = await fetch('/BS/IFAMSS/saveSchedule10', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      const data = await response.json();
      if (data.status === true) {
        setSnackbar({ open: true, message: save ? 'Saved successfully' : 'Submitted successfully', severity: 'success' });
      } else {
        throw new Error(data.message || 'Unexpected response');
      }
    } catch (err) {
      setSnackbar({ open: true, message: err.message || 'Error occurred', severity: 'error' });
    }
  };

  return (
    <>
      {/* Your main Schedule 10 table with FormInputs */}

      {/* Save and Submit Buttons */}
      <Button variant="contained" onClick={() => handleSaveOrSubmit(true)}>Save</Button>
      <Button variant="contained" color="success" onClick={() => setOpenSubmitDialog(true)}>Submit</Button>

      {/* Existing Dialog - remains unchanged */}
      <Dialog open={false /* replace with your condition */}>
        <DialogTitle>Existing Popup</DialogTitle>
        <DialogContent>This is your existing popup content.</DialogContent>
        <DialogActions>
          <Button onClick={() => {}}>Close</Button>
        </DialogActions>
      </Dialog>

      {/* Submit Confirmation Dialog */}
      <Dialog open={openSubmitDialog} onClose={() => setOpenSubmitDialog(false)}>
        <DialogTitle>Confirm Submission</DialogTitle>
        <DialogContent>Are you sure you want to submit Schedule 10 data?</DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenSubmitDialog(false)} color="inherit">Close</Button>
          <Button onClick={() => {
            setOpenSubmitDialog(false);
            handleSaveOrSubmit(false);
          }} color="success" variant="contained">
            Submit
          </Button>
        </DialogActions>
      </Dialog>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert severity={snackbar.severity}>{snackbar.message}</Alert>
      </Snackbar>
    </>
  );
};

export default Workingsc10;


âœ… Your Workingsc10 component is now updated to:

Keep your existing dialog and its <DialogActions> intact.

Add a separate Submit confirmation dialog with its own <DialogActions> (Close + Submit).

Maintain save/submit API compatibility and show snackbar alerts for status.


Let me know if you want to position the buttons, restrict re-submission, or wire this into a shared layout.


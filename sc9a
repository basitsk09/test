import React, { useState, useEffect, useMemo, useCallback } from 'react';
import {
  Table,
  TableBody,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Button,
  Box,
  Stack,
  CircularProgress,
  Typography,
} from '@mui/material';
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import { styled } from '@mui/material/styles';
import { FixedSizeList as List } from 'react-window';
import AutoSizer from 'react-virtualized-auto-sizer';
import FormInput from '../../../../common/components/ui/FormInput';
import useApi from '../../../../common/hooks/useApi';

// Configuration constants
const columnHeaders = [
  { key: 'provision', label: 'Provision' },
  // Add all column header configurations here
];

const allColumnKeys = [
  'col1', 'col2', 'col3', // Add all column keys
];

const columnFieldKeys = {
  col1: 'field1',
  col2: 'field2',
  // Map all column keys to form field keys
};

const rowDefinitionsConfig = [
  { id: 'row1', label: 'Row 1', type: 'entry', modelSuffix: 'MOD1' },
  // Add all row configurations
];

// Optimized styled component
const StyledTableCell = React.memo(styled(TableCell)(({ theme }) => ({
  fontSize: '0.875rem',
  padding: '8px',
  border: '1px solid #e0e0e0',
  whiteSpace: 'nowrap',
  [`&.${tableCellClasses.head}`]: {
    backgroundColor: theme.palette.common.black,
    color: theme.palette.common.white,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  [`&.${tableCellClasses.body}`]: {
    color: theme.palette.text.primary,
    backgroundColor: theme.palette.background.paper,
    textAlign: 'left',
  },
}));

// Virtualized row component
const ProvisionRow = React.memo(({ index, data, style }) => {
  const { rows, calculatedData, handleChange } = data;
  const row = rows[index];
  const displayRowData = calculatedData[row.id] || {};

  return (
    <div style={style}>
      <TableRow>
        <StyledTableCell>{row.label}</StyledTableCell>
        {allColumnKeys.map((colKey) => (
          <StyledTableCell key={`${row.id}-${colKey}`}>
            <FormInput
              value={displayRowData[colKey] ?? ''}
              onChange={(e) => handleChange(row.id, columnFieldKeys[colKey], e.target.value)}
              readOnly={row.type !== 'entry'}
              customStyles={{ textAlign: 'right', width: '130px' }}
              isNumeric
            />
          </StyledTableCell>
        ))}
      </TableRow>
    </div>
  );
}, (prevProps, nextProps) => {
  const prevRow = prevProps.data.rows[prevProps.index];
  const nextRow = nextProps.data.rows[nextProps.index];
  return (
    prevRow.id === nextRow.id &&
    JSON.stringify(prevProps.data.calculatedData[prevRow.id]) ===
    JSON.stringify(nextProps.data.calculatedData[nextRow.id]) &&
    prevProps.style === nextProps.style
  );
});

// Main component
const Schedule9CProvisionTable = ({ circleCode = '021', quarterEndDate = '31/03/2025', role = 'Maker' }) => {
  const { callApi } = useApi();
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({});

  // Model suffix mapping
  const modelSuffixToRowIdMap = useMemo(() => 
    rowDefinitionsConfig.reduce((acc, row) => {
      if (row.modelSuffix) acc[row.modelSuffix] = row.id;
      return acc;
    }, {}),
  []);

  // Data fetching
  const fetchData = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await callApi('/Maker/getSavedDataNineC', {
        circleCode,
        quarterEndDate,
      });

      if (response) {
        const transformedData = rowDefinitionsConfig.reduce((acc, row) => {
          if (row.type === 'entry') {
            acc[row.id] = Object.values(columnFieldKeys).reduce((fields, key) => {
              fields[key] = '';
              return fields;
            }, {});
          }
          return acc;
        }, {});

        Object.entries(response).forEach(([key, value]) => {
          const rowId = modelSuffixToRowIdMap[key];
          if (rowId && transformedData[rowId]) {
            transformedData[rowId] = value;
          }
        });

        setFormData(transformedData);
      }
    } catch (error) {
      console.error('Fetch error:', error);
    } finally {
      setIsLoading(false);
    }
  }, [circleCode, quarterEndDate, callApi, modelSuffixToRowIdMap]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Calculated data
  const calculatedData = useMemo(() => 
    rowDefinitionsConfig.reduce((acc, row) => {
      if (['entry', 'total'].includes(row.type)) {
        acc[row.id] = Object.keys(columnFieldKeys).reduce((cols, colKey) => {
          cols[colKey] = formData[row.id]?.[columnFieldKeys[colKey]] || '';
          return cols;
        }, {});
      }
      return acc;
    }, {}),
  [formData]);

  // Change handler
  const handleChange = useCallback((rowId, field, value) => {
    setFormData(prev => ({
      ...prev,
      [rowId]: {
        ...prev[rowId],
        [field]: value,
      },
    }));
  }, []);

  // Memoized list data
  const listData = useMemo(() => ({
    rows: rowDefinitionsConfig,
    calculatedData,
    handleChange,
  }), [rowDefinitionsConfig, calculatedData, handleChange]);

  if (isLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <CircularProgress />
        <Typography sx={{ ml: 2 }}>Loading Data...</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 1, width: '100%', height: 'calc(100vh - 150px)' }}>
      <TableContainer component={Paper} sx={{ height: '100%' }}>
        <Table stickyHeader sx={{ minWidth: 3000 }}>
          <TableHead>
            <TableRow>
              <StyledTableCell rowSpan={3}>Classification of PROVISION</StyledTableCell>
              <StyledTableCell colSpan={8}>PROVISIONS</StyledTableCell>
              <StyledTableCell colSpan={8}>LICRA</StyledTableCell>
              <StyledTableCell colSpan={5}>TOTAL PROVISION</StyledTableCell>
            </TableRow>
            <TableRow>
              {columnHeaders.map((ch) => (
                <StyledTableCell key={ch.key}>{ch.label}</StyledTableCell>
              ))}
            </TableRow>
            <TableRow>
              {allColumnKeys.map((key, idx) => (
                <StyledTableCell key={`colnum_${idx}`}>
                  <b>{idx + 1}</b>
                </StyledTableCell>
              ))}
            </TableRow>
          </TableHead>

          <TableBody component="div">
            <AutoSizer>
              {({ height, width }) => (
                <List
                  height={height || 600}
                  itemCount={rowDefinitionsConfig.length}
                  itemSize={60}
                  width={width || 3000}
                  itemData={listData}
                >
                  {ProvisionRow}
                </List>
              )}
            </AutoSizer>
          </TableBody>
        </Table>
      </TableContainer>

      <Stack direction="row" spacing={2} sx={{ mt: 2, justifyContent: 'center' }}>
        <Button variant="contained" color="warning">
          Save
        </Button>
        <Button variant="contained" color="success">
          Submit
        </Button>
      </Stack>
    </Box>
  );
};

export default React.memo(Schedule9CProvisionTable);